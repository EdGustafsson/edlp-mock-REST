// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using learnpoint_mock_REST.Data;

namespace learnpoint_mock_REST.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("learnpoint_mock_REST.Entities.ApiError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApiError");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.CourseDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupsReferenceDataId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInternship")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupsReferenceDataId");

                    b.ToTable("CourseDefinition");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.CourseDefinitionReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("CourseDefinitionReference");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.EducationPlan", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentEducationPlanId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("StudentEducationPlanId");

                    b.HasIndex("TypeId");

                    b.ToTable("EducationPlan");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.EducationPlanType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EducationPlanType");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LifespanFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LifespanUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffMembersReferenceDataId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentsReferenceDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName");

                    b.HasIndex("ParentGroupId");

                    b.HasIndex("StaffMembersReferenceDataId");

                    b.HasIndex("StudentsReferenceDataId");

                    b.ToTable("Group");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Group");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("GroupCategory");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("GroupReference");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupsReferenceDataId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffMembersReferenceDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupsReferenceDataId");

                    b.HasIndex("StaffMembersReferenceDataId");

                    b.ToTable("GroupRole");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupRoleReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupStaffMemberId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffMemberGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupStaffMemberId");

                    b.HasIndex("GroupStudentId");

                    b.HasIndex("StaffMemberGroupId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("GroupRoleReference");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupStaffMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FullGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsGroupManager")
                        .HasColumnType("bit");

                    b.Property<int?>("StaffMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FullGroupId");

                    b.HasIndex("StaffMemberId");

                    b.ToTable("GroupStaffMember");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FullGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FullGroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupStudent");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupsApiResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DataId")
                        .HasColumnType("int");

                    b.Property<int?>("ErrorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("ErrorId");

                    b.ToTable("GroupsApiResponses");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupsData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ReferenceDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceDataId");

                    b.ToTable("GroupsData");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupsData+GroupsReferenceData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("GroupsReferenceData");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.ParentGroupReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParentGroupId");

                    b.ToTable("ParentGroupReference");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StaffMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupsReferenceDataId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MayExposeMobilePhoneToStudents")
                        .HasColumnType("bit");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalRegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupsReferenceDataId");

                    b.ToTable("StaffMember");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StaffMember");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StaffMemberGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FullStaffMemberId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsGroupManager")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FullStaffMemberId");

                    b.HasIndex("GroupId");

                    b.ToTable("StaffMemberGroup");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StaffMemberReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("StaffMemberReference");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StaffMembersApiResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DataId")
                        .HasColumnType("int");

                    b.Property<int?>("ErrorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("ErrorId");

                    b.ToTable("StaffMembersApiResponses");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StaffMembersData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ReferenceDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceDataId");

                    b.ToTable("StaffMembersData");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StaffMembersReferenceData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("StaffMembersReferenceData");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupsReferenceDataId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeAddressId")
                        .HasColumnType("int");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalRegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupsReferenceDataId");

                    b.HasIndex("HomeAddressId");

                    b.ToTable("Student");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Student");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentEducationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FullStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FullStudentId");

                    b.HasIndex("StateId");

                    b.ToTable("StudentEducationPlan");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentEducationPlanState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActiveStudent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentEducationPlanState");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FullStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FullStudentId");

                    b.HasIndex("GroupId");

                    b.ToTable("StudentGroup");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentHomeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentHomeAddress");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("StudentReference");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentsApiResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DataId")
                        .HasColumnType("int");

                    b.Property<int?>("ErrorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("ErrorId");

                    b.ToTable("StudentsApiResponses");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentsData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ReferenceDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceDataId");

                    b.ToTable("StudentsData");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentsReferenceData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("StudentsReferenceData");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.FullGroup", b =>
                {
                    b.HasBaseType("learnpoint_mock_REST.Entities.Group");

                    b.Property<int?>("CourseDefinitionId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupsDataId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupsDataId1")
                        .HasColumnType("int");

                    b.HasIndex("CourseDefinitionId");

                    b.HasIndex("GroupsDataId");

                    b.HasIndex("GroupsDataId1");

                    b.HasDiscriminator().HasValue("FullGroup");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.FullStaffMember", b =>
                {
                    b.HasBaseType("learnpoint_mock_REST.Entities.StaffMember");

                    b.Property<int?>("StaffMembersDataId")
                        .HasColumnType("int");

                    b.HasIndex("StaffMembersDataId");

                    b.HasDiscriminator().HasValue("FullStaffMember");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.FullStudent", b =>
                {
                    b.HasBaseType("learnpoint_mock_REST.Entities.Student");

                    b.Property<int?>("StudentsDataId")
                        .HasColumnType("int");

                    b.HasIndex("StudentsDataId");

                    b.HasDiscriminator().HasValue("FullStudent");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.CourseDefinition", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.GroupsData+GroupsReferenceData", null)
                        .WithMany("CourseDefinitions")
                        .HasForeignKey("GroupsReferenceDataId");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.EducationPlan", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.StudentEducationPlan", null)
                        .WithMany("Parts")
                        .HasForeignKey("StudentEducationPlanId");

                    b.HasOne("learnpoint_mock_REST.Entities.EducationPlanType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.Group", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.GroupCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryName");

                    b.HasOne("learnpoint_mock_REST.Entities.ParentGroupReference", "ParentGroup")
                        .WithMany()
                        .HasForeignKey("ParentGroupId");

                    b.HasOne("learnpoint_mock_REST.Entities.StaffMembersReferenceData", null)
                        .WithMany("Groups")
                        .HasForeignKey("StaffMembersReferenceDataId");

                    b.HasOne("learnpoint_mock_REST.Entities.StudentsReferenceData", null)
                        .WithMany("Groups")
                        .HasForeignKey("StudentsReferenceDataId");

                    b.Navigation("Category");

                    b.Navigation("ParentGroup");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupRole", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.GroupsData+GroupsReferenceData", null)
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupsReferenceDataId");

                    b.HasOne("learnpoint_mock_REST.Entities.StaffMembersReferenceData", null)
                        .WithMany("GroupRoles")
                        .HasForeignKey("StaffMembersReferenceDataId");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupRoleReference", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.GroupStaffMember", null)
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupStaffMemberId");

                    b.HasOne("learnpoint_mock_REST.Entities.GroupStudent", null)
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupStudentId");

                    b.HasOne("learnpoint_mock_REST.Entities.StaffMemberGroup", null)
                        .WithMany("GroupRoles")
                        .HasForeignKey("StaffMemberGroupId");

                    b.HasOne("learnpoint_mock_REST.Entities.StudentGroup", null)
                        .WithMany("GroupRoles")
                        .HasForeignKey("StudentGroupId");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupStaffMember", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.FullGroup", null)
                        .WithMany("StaffGroupMembers")
                        .HasForeignKey("FullGroupId");

                    b.HasOne("learnpoint_mock_REST.Entities.StaffMemberReference", "StaffMember")
                        .WithMany()
                        .HasForeignKey("StaffMemberId");

                    b.Navigation("StaffMember");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupStudent", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.FullGroup", null)
                        .WithMany("StudentGroupMembers")
                        .HasForeignKey("FullGroupId");

                    b.HasOne("learnpoint_mock_REST.Entities.StudentReference", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupsApiResponse", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.GroupsData", "Data")
                        .WithMany()
                        .HasForeignKey("DataId");

                    b.HasOne("learnpoint_mock_REST.Entities.ApiError", "Error")
                        .WithMany()
                        .HasForeignKey("ErrorId");

                    b.Navigation("Data");

                    b.Navigation("Error");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupsData", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.GroupsData+GroupsReferenceData", "ReferenceData")
                        .WithMany()
                        .HasForeignKey("ReferenceDataId");

                    b.Navigation("ReferenceData");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.ParentGroupReference", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.GroupReference", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("learnpoint_mock_REST.Entities.ParentGroupReference", "ParentGroup")
                        .WithMany()
                        .HasForeignKey("ParentGroupId");

                    b.Navigation("Group");

                    b.Navigation("ParentGroup");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StaffMember", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.GroupsData+GroupsReferenceData", null)
                        .WithMany("StaffMembers")
                        .HasForeignKey("GroupsReferenceDataId");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StaffMemberGroup", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.FullStaffMember", null)
                        .WithMany("Groups")
                        .HasForeignKey("FullStaffMemberId");

                    b.HasOne("learnpoint_mock_REST.Entities.GroupReference", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StaffMembersApiResponse", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.StaffMembersData", "Data")
                        .WithMany()
                        .HasForeignKey("DataId");

                    b.HasOne("learnpoint_mock_REST.Entities.ApiError", "Error")
                        .WithMany()
                        .HasForeignKey("ErrorId");

                    b.Navigation("Data");

                    b.Navigation("Error");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StaffMembersData", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.StaffMembersReferenceData", "ReferenceData")
                        .WithMany()
                        .HasForeignKey("ReferenceDataId");

                    b.Navigation("ReferenceData");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.Student", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.GroupsData+GroupsReferenceData", null)
                        .WithMany("Students")
                        .HasForeignKey("GroupsReferenceDataId");

                    b.HasOne("learnpoint_mock_REST.Entities.StudentHomeAddress", "HomeAddress")
                        .WithMany()
                        .HasForeignKey("HomeAddressId");

                    b.Navigation("HomeAddress");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentEducationPlan", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.FullStudent", null)
                        .WithMany("EducationPlans")
                        .HasForeignKey("FullStudentId");

                    b.HasOne("learnpoint_mock_REST.Entities.StudentEducationPlanState", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentGroup", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.FullStudent", null)
                        .WithMany("Groups")
                        .HasForeignKey("FullStudentId");

                    b.HasOne("learnpoint_mock_REST.Entities.GroupReference", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentsApiResponse", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.StudentsData", "Data")
                        .WithMany()
                        .HasForeignKey("DataId");

                    b.HasOne("learnpoint_mock_REST.Entities.ApiError", "Error")
                        .WithMany()
                        .HasForeignKey("ErrorId");

                    b.Navigation("Data");

                    b.Navigation("Error");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentsData", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.StudentsReferenceData", "ReferenceData")
                        .WithMany()
                        .HasForeignKey("ReferenceDataId");

                    b.Navigation("ReferenceData");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.FullGroup", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.CourseDefinitionReference", "CourseDefinition")
                        .WithMany()
                        .HasForeignKey("CourseDefinitionId");

                    b.HasOne("learnpoint_mock_REST.Entities.GroupsData", null)
                        .WithMany("Groups")
                        .HasForeignKey("GroupsDataId");

                    b.HasOne("learnpoint_mock_REST.Entities.GroupsData", null)
                        .WithMany("ParentGroups")
                        .HasForeignKey("GroupsDataId1");

                    b.Navigation("CourseDefinition");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.FullStaffMember", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.StaffMembersData", null)
                        .WithMany("StaffMembers")
                        .HasForeignKey("StaffMembersDataId");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.FullStudent", b =>
                {
                    b.HasOne("learnpoint_mock_REST.Entities.StudentsData", null)
                        .WithMany("Students")
                        .HasForeignKey("StudentsDataId");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupStaffMember", b =>
                {
                    b.Navigation("GroupRoles");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupStudent", b =>
                {
                    b.Navigation("GroupRoles");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupsData", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("ParentGroups");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.GroupsData+GroupsReferenceData", b =>
                {
                    b.Navigation("CourseDefinitions");

                    b.Navigation("GroupRoles");

                    b.Navigation("StaffMembers");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StaffMemberGroup", b =>
                {
                    b.Navigation("GroupRoles");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StaffMembersData", b =>
                {
                    b.Navigation("StaffMembers");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StaffMembersReferenceData", b =>
                {
                    b.Navigation("GroupRoles");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentEducationPlan", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentGroup", b =>
                {
                    b.Navigation("GroupRoles");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentsData", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.StudentsReferenceData", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.FullGroup", b =>
                {
                    b.Navigation("StaffGroupMembers");

                    b.Navigation("StudentGroupMembers");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.FullStaffMember", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("learnpoint_mock_REST.Entities.FullStudent", b =>
                {
                    b.Navigation("EducationPlans");

                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
